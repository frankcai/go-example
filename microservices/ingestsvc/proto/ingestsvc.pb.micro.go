// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ingestsvc.proto

package ingestsvc

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IngestSvc service

func NewIngestSvcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IngestSvc service

type IngestSvcService interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
	IngestFiles(ctx context.Context, in *IngestFilesRequest, opts ...client.CallOption) (*IngestFilesResponse, error)
}

type ingestSvcService struct {
	c    client.Client
	name string
}

func NewIngestSvcService(name string, c client.Client) IngestSvcService {
	return &ingestSvcService{
		c:    c,
		name: name,
	}
}

func (c *ingestSvcService) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.name, "IngestSvc.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestSvcService) IngestFiles(ctx context.Context, in *IngestFilesRequest, opts ...client.CallOption) (*IngestFilesResponse, error) {
	req := c.c.NewRequest(c.name, "IngestSvc.IngestFiles", in)
	out := new(IngestFilesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IngestSvc service

type IngestSvcHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
	IngestFiles(context.Context, *IngestFilesRequest, *IngestFilesResponse) error
}

func RegisterIngestSvcHandler(s server.Server, hdlr IngestSvcHandler, opts ...server.HandlerOption) error {
	type ingestSvc interface {
		Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error
		IngestFiles(ctx context.Context, in *IngestFilesRequest, out *IngestFilesResponse) error
	}
	type IngestSvc struct {
		ingestSvc
	}
	h := &ingestSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&IngestSvc{h}, opts...))
}

type ingestSvcHandler struct {
	IngestSvcHandler
}

func (h *ingestSvcHandler) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.IngestSvcHandler.Hello(ctx, in, out)
}

func (h *ingestSvcHandler) IngestFiles(ctx context.Context, in *IngestFilesRequest, out *IngestFilesResponse) error {
	return h.IngestSvcHandler.IngestFiles(ctx, in, out)
}
